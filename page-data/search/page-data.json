{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"서론 작년 실무에서 진행된 메신저 개발에서 프로젝트의 모바일 연동 및 로 구축 업무를 인수인계를 받으며 세션 관리, 실시간 메시지 전달, 채팅 히스토리 저장, 온라인 상태 관리, 분산 캐시 등 다양한 용도로 Redis 활용하였고, 프로젝트 진행 과정에서 정리한 Redis 개념과 동작 원리를 포스팅하겠습니다. Redis란? Redis(Remote Dicti…","fields":{"slug":"/note/"},"frontmatter":{"date":"May 21, 2024","title":"[정리] Redis 실무에 사용하면서 공부한 내용","tags":["DataBase","Redis"]},"rawMarkdownBody":"\r\n## 서론\r\n작년 실무에서 진행된 메신저 개발에서 프로젝트의 모바일 연동 및 `온프레미스(On-premise)`로 구축 업무를 인수인계를 받으며 세션 관리, 실시간 메시지 전달, 채팅 히스토리 저장, 온라인 상태 관리, 분산 캐시 등 다양한 용도로 Redis 활용하였고, 프로젝트 진행 과정에서 정리한 Redis 개념과 동작 원리를 포스팅하겠습니다.\r\n\r\n\r\n## Redis란?\r\n\r\nRedis(Remote Dictionary Storage,레디스)는 모든 데이터를 메모리에 저장하고 조회하는 in-memory DB, 모든 데이터를 메모리로 불러와서 처리하는 메모리 기반의 key-value 구조의 데이터 관리 시스템(DBMS)이다. 일종의 NoSQL이다.\r\n>이런 기술을 위해 Redis 가 존재하고 누군가는 Redis 를 캐싱 솔루션이라고 부르기도 하고 누군가는 NoSQL 의 `Key-Value 저장소`라고 부르기도 한다.\r\n\r\n## Key-Value 저장소 이해\r\nkey-value 구조 데이터란, mysql 같은 관계형 데이터가 아닌 비 관계형 구조로서 데이터를 그저 '키-값' 형태로 단순하게 저장하는 구조를 말한다.\r\n\r\n>장점은 데이터의 고속 읽기와 쓰기에 최적화, 단점은 쿼리 연산을 지원 X\r\n\r\n![키-값 데이터 저장소의 간단한 예](./1.PNG)\r\n\r\n## 인 메모리(In-Memory) 저장 방식\r\n레디스는 데이터를 저장하는 공간이 특별합니다. 일반적으로 mysql, oracle 등의 RDB들이 하드디스크에 데이터를 저장하고 관리하는 것과는 달리 레디스는 데이터를 주기억장치인 ram, 즉 In-memory에서 관리된다.\r\n\r\n## 인 메모리(In-Memory) 저장 방식의 문제점\r\nredis의 in memory 저장 방식은 빠르기도 하지만 DB 서버에 장애가 발생할 경우 또는 서버 전원이 갑자기 꺼지면 안에 있는 데이터들이 삭제된다. 그래서 보통은 로그인 세션 같은, 서버가 꺼져서 날아가도 상관 없는 임시 데이터에 주로 쓰인다. 그리고 대부분 속도의 장점으로 사용되기 때문에 압축은 하지 않으며, 데이터에 비해 RAM 용량이 넉넉하지 않을 경우 가상 메모리를 쓰게 되어 역효과가 일어나기도 한다.\r\n\r\n## RDB, NoSQL, In-Memory DB 비교\r\n\r\n\r\n\r\n## Redis의 주요 특성\r\n### Redis 용어 정리\r\n\r\n|항목|내용|\r\n|-|-----|\r\n|Key-Value 스토어|Key-Value 를 저장할 수 있는 스토리지를 지원한다.|\r\n|컬렉션 지원\t|List, Set, Sorted Set, Hash 등의 자료구조를 지원한다.|\r\n|Pub/Sub 지원|Publish/Subscribe 모델을 지원한다.|\r\n|디스크 저장(Persistent Layer)|현재 메모리의 상태를 디스크로 저장할 수 있는 기능과 현재까지의 업데이트 내용을 로그로 저장할 수 있는 AOF 기능이 있다.|\r\n|복제(Replication)|다른 노드에서 해당 내용을 복제할 수 있는 Master/Slave 구조를 지원한다.|\r\n|복제(Replication)|이상의 기능을 지원하면서도 초당 100,000 QPS(Queries Per Second) 수준의 높은 성능을 지원한다.|\r\n\r\n+ Key-Value 스토어\r\n  - 기본적으로 Redis 는 Key-Value 스토어로 빠르고 간단하게 데이터를 가지고 올 수 있다.\r\n+ 컬렉션 지원\r\n  - Redis 는 여러가지 자료구조를 지원하므로 서비스에 맞는 설계를 할 때 유용하게 사용될 수 있다.\r\n+ 디스크 저장\r\n  - Redis 의 특징 중 하나는 현재 메모리의 상태를 디스크에 스냅샷 형태로 남길 수 있는 RDB 방식이 있다. 그러므로 Redis 를 restart 할 때 스냅샷에 있는 내용을 가지고 쉽게 복구할 수 있고, AOF(Append Only File) 형태로 Redis 에 변경 내역들을 모두 남기는게 가능해서 Write Behind 같은 기능을 지원하는 것도 가능하다.\r\n+ 복제\r\n  - Redis 는 Master/Slave 구조로 이용할 수 있어서 Master 의 읽기 부하를 Slave 로 나누는게 가능하다.\r\n+ 빠른 성능\r\n  - Redis 를 이용하는 가장 큰 이유는 성능이다. 초당 50,000 ~ 60,000 이상의 처리 속도가 필요하다면 어쩔 수 없이 Redis 나 Memcached 를 이용해야한다.\r\n\r\n## Redis와 비교대상 Memcashed\r\nMemcahed와 Redis와 비교대상으로 질문이 많은데 이젠에 살펴본 후 머릿속에 남아있던 기억은 사실상 Redis가 더많은 기능을 제공하고있고 단순히 Memcahed에 비해 Redis가 추가적으로 제공하는 기능이 많았다고 기억하고 있습니다.\r\n블로그를 작성하게되면서 더욱 자세히 알게되었고 리마인드하며 내용을 정리 했습니다.\r\n\r\n```\r\nMemcached 는 캐싱 솔루션이고 Redis 는 저장소의 개념까지 추가된 것 입니다.\r\n```\r\n캐싱이란 말은 빠른 응답을 위해 결과를 저장해주는 솔루션을 말하고 언제든지 사라져도 상관없습니다. 하지만 저장소의 개념은 데이터가 보존되어야 한다는 의미입니다. 그래서 Redis 는 RDB 나 AOF 같은 기능을 지원하기도 합니다.\r\n\r\n그리고 추가로 Redis 는 Memcached 에 없는 여러가지 자료구조를 지원해서 개발자의 생산성을 높여주는 일도 해줍니다.\r\n\r\n### Redis 와 Memcached 의 장단점 비교\r\n\r\n|기능|Redis|Memcached|\r\n|-|-----|----|\r\n|속도|초당 100,000 QPS 이상|초당 100,000 QPS 이상|\r\n|자료구조|List, Set, Sorted Set, Hash 지원|Key-Value 만 지원|\r\n|안정성|특성을 잘못 이해할 경우에 장애가 발생할 수 있다.|장애가 거의 없다.|\r\n|응답 속도의 균일성|Memcached 에 비해서 응답속도의 균일성이 떨어질 수 있다.|전체적으로 응답속도는 균일하다.|\r\n\r\n응답 속도의 균일성 같은 경우가 Redis 와 Memcached 가 차이나는 이유는 메모리 할당 구조가 다르기 떄문인데 Redis 같은 경우는 Jemalloc() 을 사용해 메모리 할당을 하고 free() 를 통해서 메모리 할당을 지웁니다. 반면에 Memcached 는 slab 을 통해서 일정한 사이즈의 메모리를 균일하게 1MB 의 페이지로 자르고 그 안에 또 작은 사이즈 부터 큰 사이즈의 chunk() 를 일정하게 놔두는 식을 이용해 메모리 내부 단편화 현상은 있지만 외부 단편화 현상을 없도록 해서 메모리 관리를 조금 더 효율적으로 이용할 수 있어서 응답 속도가 비교적 균일합니다.\r\n\r\n\r\n## 다음\r\n\r\n[Redis의 저장 방식](../oauth-2.0/index.md) Redis의 저장 방식"},{"excerpt":"서론 이번 글에서는 OAuth2.0에 대해서 알아보고 이것을 어떻게 적용하여 서버를 구성하는지 살펴 보겠습니다.\n실제로 실무에서 인증서버 OAuth2.0 적용하여 구성하였고 구성하는동안 공부 및 정리한 내용을 다루겠습니다. OAuth 2.0란? OAuth2.0 사용 예시 OAuth 서버는 인증서버로부터 인증된 클라이언트만 접근 하도록 할 수 있으며, 추가…","fields":{"slug":"/oauth-2.0/"},"frontmatter":{"date":"May 16, 2024","title":"OAuth 2.0 개념(Open Authorization)?","tags":["인증","OAuth 2.0"]},"rawMarkdownBody":"\r\n## 서론\r\n\r\n이번 글에서는 OAuth2.0에 대해서 알아보고 이것을 어떻게 적용하여 서버를 구성하는지 살펴 보겠습니다.\r\n실제로 실무에서 인증서버 OAuth2.0 적용하여 구성하였고 구성하는동안 공부 및 정리한 내용을 다루겠습니다.\r\n\r\n\r\n## OAuth 2.0란?\r\n![OAuth2.0 사용 예시](./1.PNG)\r\n\r\nOAuth 서버는 인증서버로부터 인증된 클라이언트만 접근 하도록 할 수 있으며, 추가로 클라이언트 별로 권한을 부여 하여 권한 별로 처리 할 수 있도록 할 수 있다. \r\n\r\n다양한 서비스(웹서비스, 모바일앱, IOT기기등등) 이런 다양한 환경에서도 당연하게 로그인, 사용자 인증과 같은 절차는 필수적으로 이루어진다. 이렇게 다양한 환경을 모두 아우를 수 있도록 사용자 인증 절차를 표준화한 것이 OAuth이다.\r\n> 접근 권한을 위임(Delegated Authorization)받을 수 있는 표준 프로토콜\r\n\r\n예를 들어 페이스북, 카카오톡 개발자 센터에 가보면 로그인 기능의 경우 OAuth 2.0 형태로 되어있으며, 내 앱에 페이스북, 카카오톡 로그인을 붙여 사용자 정보를 가져와서 SNS 로그인 기능을 구현할 수 있으며, 로그인 한 사용자의 페이스북, 카카오톡을 컨트롤 할 수 있다.\r\n\r\n> OAuth 2.0은 1.0에서 알려진 보안 문제 등을 개선한 버젼이다.\r\n   \r\n그리고 OAuth2는 이름에서도 알 수 있듯이 OAuth의 2번째 버전이고, 현재는 OAuth2가 RFC 표준으로 등록되어서 사용되고 있다.\r\nOAuth2는 기본적으로 아래의 흐름을 갖고 있다.\r\n\r\n## OAuth 2.0 용어 정리\r\n\r\n|구분|설명|\r\n|-|---|\r\n|**Resource Server**| Client의 액세스 토큰을 검증하여 요청을 처리한다.<br/>(ex - Google, Naver, Kakao ...) <br/><br/>클라이언트(Client) - 이 서버로 인증 서버에서 발급받은 Token을 넘겨 검증을 한다.|\r\n|**Authorization Server**| Client를 인증하고, Client에게 액세스 토큰을 발급또는 권한 부여를 담당한다.|\r\n|**Access Token**|API 통신에 대한 접근 권한을 Resource Owner가인가하였음을 나타내는 자격증명이다.|\r\n|**Refresh Token**|access token은 보안상 만료기간이 짧기 때문에 얼마 지나지 않아 만료되면 사용자는 로그인을 다시 시도해야한다. 그러나 refresh token이 있다면 access token이 만료될 때 refresh token을 통해 access token을 재발급 받아 재 로그인 할 필요없게끔 한다.|\r\n|**Grant Type**|**허가를 받는 유형**애플리케이션이 사용자 데이터를 안전하게 액세스하도록 돕는 방식. 주요 유형으로는 웹 애플리케이션에 적합한 **Authorization Code Grant (권한 부여 코드 유형)**, Client 사이드 애플리케이션에 적합한 **Implicit Grant (암시적 유형)**, 신뢰할 수 있는 애플리케이션에서 사용하는 **Password Grant**, 서버 간 통신을 위한 **Client Credentials Grant (Client 자격 증명 유형)**, 만료된 토큰 갱신을 위한 **Refresh Token Grant (갱신 토큰 유형)** 이 있다.|\r\n| **Scope**| 클라이언트가 요청하는 권한의 범위를 정의하여, 액세스 토큰이 어떤 자원과 작업에 접근할 수 있는지 명시한다. 구글로 로그인을 했다면, 그 서비스 안에서 사용할 수 있는 모든 기능 |\r\n|**Authorized redirect URIs**| 예를 들어, 사용자가 \"특정 사이트\"에 로그인하려고 할 때, 구글 로그인을 선택하면 구글 로그인 페이지로 이동하고 로그인이 끝나면, 구글은 사용자를 다시 \"특정 사이트\"로 돌려보냅니다. 이때 사용자를 돌려보낼 주소이다.\r\n|**Client ID**| Client를 식별하는 식별자 ID를 의미 한다.\r\n|**Client Secret**| Client ID에 해당한 PASSWORD 이다.\r\n\r\n\r\n\r\n##  OAuth 2.0 인증 과정\r\n\r\n아래 이미지는 주로 소셜 로그인에 사용되고 있는 `Authorization Code Grant (권한 부여 코드 유형)`을 적용시킨 `OAuth 2.0 인증 과정 프로세스 예시`입니다.\r\n\r\n![OAuth 2.0 Authorization Code Grant](./3.PNG)\r\n\r\n* **서비스(사용자가 이용하려는 서비스) - Client**\r\n* **인증 서버 - Authorization Server**\r\n\r\n크게 요약해보면,\r\n\r\nClient(사용자가 이용하려는 서비스)에서 서비스를 이용하려는 사용자를 대신하여 Authorization Server와 Resource Server에 요청을 보내 필요한 정보를 서로 비교해 유효성을 판단한다.\r\n\r\n##  인증 과정 자세히 \r\n### 1. 사용자는 서비스를 이용하기 위해 로그인 화면에 접근 한다.\r\n### 2. 그럼 서비스는 사용자에게 로그인 페이지를 제공하게된다. 로그인 페이지에서 사용자는 \"소셜 로그인\"을 시도한다.\r\n\r\n![소셜 로그인](./4.PNG)\r\n![1 ~ 2. 로그인 요청](./5.PNG)\r\n\r\nClient 서버는 OAuth 프로세스를 시작하기 위해 사용자의 브라우저를 Authorization Server로 보내야한다.\r\n\r\nClient 서버는 이때 Authorization Server가 제공하는 Authorization URL에 `response_type` , `client_id` , `redirect_uri` , `scope` 등의 매개변수를 포함하여 보낸다.\r\n\r\n```\r\nhttps://accounts.google.com/o/oauth2/auth?\r\n&response_type=code\r\n&client_id=1234567890-abcde\r\n&redirect_uri=https://yourapp.com/callback\r\n&scope=email,profile\r\n```\r\n### 3. Authorization URL로 이동된 사용자는 제공된 로그인 페이지에\r\n### 4. ID/PW 입력하여 인증 시도 \r\n### 5. Authorization Code 발급하고,\r\n### 6. Redirect URI로 Redirect\r\n```\r\nhttps://yourapp.com/callback?code=AUTHORIZATION_CODE\r\n```\r\n\r\n인증이 성공되었다면, Authorization Server는 제공된 Redirect URI로 사용자를 리다이렉션시킬 것 이다. 이때, Redirect URI에 Authorization Code를 포함하여 사용자를 리디렉션 시킨다.\r\n\r\n이때, Authorization Code란 Client가 Access Token을 획득하기 위해 사용하는 임시 코드이며 Authorization Code Grant 타입 인증방식의 주요 포인트다.\r\n\r\n### 7. Client 서버는 Authorization Server에 Authorization Code를 전달하고, Access Token을 응답 \r\n\r\nClient는 발급받은 사용자가 쿠키나 세션에 Access Token을 저장하고, 이후 Resource Server에서 사용자가 리소스서버에 접근하기 위해 Access Token을 같이 전달하게 된다.\r\n\r\n당연히 `Access Token`은 유출되어서는 안되고 제 3자가 가로채지 못하도록 HTTPS 연결을 통해서만 사용될 수 있다. 아래는 ASP.NET Core 애플리케이션에서 OpenID Connect와 OAuth 2.0 인증 및 인가를 구현하기 위한 라이브러리 프레임워크 `Openiddict`로 적용한 프로젝트에 `HTTP`로 통신했을때 나왔던 에러다.\r\n```\r\n{\r\n  \"error\": \"invalid_request\",\r\n  \"error_description\": \"This server only accepts HTTPS requests.\",\r\n  \"error_uri\": \"https://documentation.openiddict.com/errors/ID2083\"\r\n}\r\n```\r\n\r\n토큰 발급 성공 예시\r\n![토큰](./8.PNG)\r\n\r\nAuthorization Code와 Access Token 교환은 `token` 엔드포인트에서 이루어진다. 아래는 token 엔드포인트에서 Access Token을 발급받기 위한 HTTP 요청의 예시이다. 이 요청은 `application/x-www-form-urlencoded` 의 형식에 맞춰 필수 매개변수를 전달해야한다.\r\n\r\n```\r\nPOST https://oauth2.googleapis.com/token\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nclient_id=YOUR_CLIENT_ID&\r\nclient_secret=YOUR_CLIENT_SECRET&\r\ncode=AUTHORIZATION_CODE&\r\nredirect_uri=YOUR_REDIRECT_URI&\r\ngrant_type=authorization_code\r\n```\r\n\r\n- `grant_type` : Authorization Code Grant에 맞는 `authorization_code` 로 설정 \r\n- `code` : 발급받은 Authorization Code\r\n- `redirect_uri` : Redirect URI\r\n- `client_id` : Client ID\r\n- `client_secret` : Client ID에 해당하는 Client Secret이 발급된 경우 포함하여 요청해야한다.\r\n\r\n![3 ~ 7. 로그인 요청](./6.PNG)\r\n\r\n\r\n### 8 ~ 9. 인증 완료 및 로그인 성공\r\n\r\n위 과정을 성공적으로 마치면 Client 서버는 사용자에게 로그인이 성공하였음을 알린다.\r\n\r\n\r\n\r\n### 10 ~ 13. Access Token으로 리소스 접근\r\n\r\n이후 사용자가 Resource Server의 리소스가 필요한 기능을 Client 서버에 요청한다. Client 서버는 위 과정에서 발급받고 저장해둔 사용자의 Access Token을 사용하여 리소스 서버에 토큰을 검증하고, 사용자가 Clien 서버에 요청한 정보를 제공한다.\r\n\r\n![10 ~ 13 로그인 요청](./7.PNG)\r\n\r\n\r\n\r\n\r\n아래 이미지는 **Client Credentials Grant Type**을 적용시킨 OAuth 2.0 인증과정 프로세스 예시입니다.\r\n\r\n\r\n![OAuth 2.0 Client Credentials Grant Type](./2.PNG)\r\n\r\n프로젝트에선 Authorization Code Grant 형식을 적용하진 않았지만 인증서버 구축 전 일반적 사용되는 소셜 로그인을 분석하고 공부한 내용을 정리하겠습니다."},{"excerpt":"서론 최근 회사내 인증 서버를 구축하여 프로젝트 진행 과정동안 공부한 내용을 정리했습니다. 이 프로젝트의 주요 목표는 OAuth 2.0, OpenID Connect를 활용하여 API서버간 안전하고 확장 가능한 인증 시스템을 만드는 것입니다. 이 글에서는 OAuth 2.0과 OpenID Connect의 개념, 그리고 OpenIddict 적용 방법에 대해 공…","fields":{"slug":"/intro/"},"frontmatter":{"date":"May 16, 2024","title":"[정리] 인증서버 구축","tags":["인증/인가","프로젝트"]},"rawMarkdownBody":"\r\n## 서론\r\n\r\n최근 회사내 인증 서버를 구축하여 프로젝트 진행 과정동안 공부한 내용을 정리했습니다. 이 프로젝트의 주요 목표는 OAuth 2.0, OpenID Connect를 활용하여 API서버간 안전하고 확장 가능한 인증 시스템을 만드는 것입니다. 이 글에서는 OAuth 2.0과 OpenID Connect의 개념, 그리고 OpenIddict 적용 방법에 대해 공부하고 정리한 내용을 포스팅하겠습니다.\r\n\r\n\r\n## 인증 방식 프로세스\r\n\r\n- 사전에 개별 제공된 인증 정보로서 인증 서버를 통해 인증을 거쳐야 한다.\r\n- 인증 성공 시 인증 서버로 부터 발급 받은 Access Token을 API 서버 연동 호출 시에 HTTP 헤더에 포함시킨다.\r\n- API 서버는 외부 API 서버로 전달 받은 토큰 정보를 이용하여 토큰의 적합성 검사를 진행 한 후 토큰이 정상일 경우 API를 호출하여 그 Response를 외부 API 서버에 반환 한다.\r\n\r\n![외부서버 연동 인증 프로세스](./1.PNG)\r\n\r\n## 인증서버 구축의 주요 목표\r\n\r\n- 보안 강화\r\n- 규제 준수\r\n- 확장성과 유연성\r\n- 중앙 집중식 사용자(외부서버) 관리\r\n\r\n\r\n## 다음\r\n\r\n[OAuth 2.0에 대하여](../oauth-2.0/index.md) OAuth 2.0과 OpenID Connect의 개념정리"},{"excerpt":"How to change the favicon? The favicon is located in . If you replace that image, the favicon will change. If you want to change the name of the favicon, change the  property of  in . Utterance is no…","fields":{"slug":"/other-tips/"},"frontmatter":{"date":"May 04, 2021","title":"🤩 4. Other Tips","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\r\n## How to change the favicon?\r\n\r\nThe favicon is located in `static/favicon.png`. If you replace that image, the favicon will change.\r\n\r\nIf you want to change the name of the favicon, change the `icon` property of `gatsby-plugin-manifest` in `gatsby-config.js`.\r\n\r\n## Utterance is not working properly.\r\n\r\nIn the http environment, utterance may not work properly. Host your blog with https.\r\n\r\n## How to set OG Image?\r\n\r\nReplace the `og-image.png` file in the `/static` directory with your own image file.\r\n\r\n## Do you have another question?\r\n\r\nPlease comment on this article or [open an issue](https://github.com/devHudi/gatsby-starter-hoodie/issues) in the gatsby-starter-hoodie repository. Your participation advances gatsby-starter-hoodie. Thank you 😎.\r\n"},{"excerpt":"1. Add a post You can add posts by creating a new markdown document in the  path. 1-1. Post file structure There are two ways to add a new document. The first is to create a markdown file for a singl…","fields":{"slug":"/writing-guide/"},"frontmatter":{"date":"May 03, 2021","title":"🤔 3. Writing Guide","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\r\n## 1. Add a post\r\n\r\nYou can add posts by creating a new markdown document in the `contents/post` path.\r\n\r\n### 1-1. Post file structure\r\n\r\nThere are two ways to add a new document. The first is to create a markdown file for a single document without a directory. If you are writing about JavaScript, you can create a `about-javascript.md` file in the `contents/posts` directory.\r\n\r\nThe second is to create a directory and create an `index.md` file in it. This method is useful when the document contains several additional files such as picture files.\r\n\r\nEach file name or directory name becomes a unique address of the document and can be accessed as follows. `https://siteURL/about-javascript`.\r\n\r\n### 1-2. Frontmatter\r\n\r\nThe Markdown document you create contains the document's metadata called frontmatter.\r\n\r\n```\r\n---\r\ntitle: \"🤔 3. Writing Guide\"\r\ndescription: \"How to write and add a post?\"\r\ndate: 2021-05-03\r\nupdate: 2021-05-03\r\ntags:\r\n  - hoodie\r\n  - writing-guide\r\nseries: \"Getting started your blog with gatsby-starter-hoodie\"\r\n---\r\n```\r\n\r\nAbove is the frontmatter of the document you are currently reading. Among them, title and date are required. It is recommended to enclose the string with spaces in quotation marks.\r\n\r\n### 1-3. Writing markdown\r\n\r\nIf you have written a Frontmatter, you can write your markdown document under it. gatsby-starter-hoodie supports most Markdown syntax. To learn more about Markdown syntax, see the [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) documentation on GitHub.\r\n\r\n## 2. Syntax Highlighting & Katex\r\n\r\n### 2-1. Syntax Highlighting\r\n\r\nSyntax highlighting based on Prism.JS is supported.\r\n\r\n#### Examples\r\n\r\nJavascript\r\n\r\n```javascript\r\nconsole.log(\"Hello, world!\")\r\n```\r\n\r\nPython\r\n\r\n```python\r\nprint(\"Hello, world!\")\r\n```\r\n\r\nIt supports a wider variety of other languages. Check it out on the [Prism.js website](https://prismjs.com/).\r\n\r\n### 2-2. Katex\r\n\r\nIt supports Katex syntax, you can easily express complex formulas.\r\n\r\n#### Inline mode\r\n\r\n$$E = m c^{2}$$\r\n\r\n#### Block mode\r\n\r\n$$\r\n\\int_{0}^{\\infty} f(x) dx\r\n$$\r\n\r\n## 3. Add images to a post\r\n\r\nYou can easily embed images using relative paths. It is easy to manage documents containing images by creating a directory.\r\n\r\n![Sample Image Caption](sample-image.jpg)\r\n\r\nImages are loaded with Lazy Loading, so you can secure fast document loading speed.\r\n\r\n> ⚠ The extension of the file must be set to lowercase.\r\n\r\n## 4. Tagging\r\n\r\n![](tag-example.jpg)\r\n\r\nYou can classify and search documents by tag set in Frontmatter. All tags you set can be viewed and searched in `https://siteUrl/tags`.\r\n\r\n## 5. Series\r\n\r\n![](series-example.jpg)\r\n\r\nYou can publish multiple related documents in a series. The series set in Frontmatter is grouped together and shown at the top of the document. This can be useful for serialized documents with an order. Series documents are displayed in ascending order of creation date.\r\n\r\nThe current document is also set in a series called `Getting started your blog with gatsby-starter-hoodie`.\r\n"},{"excerpt":"Getting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉. 1. Create a Gatsby site Make sure you have node.js and gatsby-cli installed on your computer. 2. Start…","fields":{"slug":"/quick-start/"},"frontmatter":{"date":"May 02, 2021","title":"🚀 2. Quick Start","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\r\nGetting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉.\r\n\r\n## 1. Create a Gatsby site\r\n\r\n> Make sure you have **node.js** and **gatsby-cli** installed on your computer.\r\n\r\n```\r\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\r\n```\r\n\r\n## 2. Start dev server\r\n\r\n```\r\n$ cd my-hoodie-blog\r\n$ npm run start\r\n```\r\n\r\nNow you can access to your blog at localhost:8000.\r\n\r\n## 3. Create your own Github repository\r\n\r\nUtterance comment widget is based on **Github issue system**. So you need your own GitHub repository. Also, if you want to publish your blog through Github Pages or Netlify, the Github Repository is a necessary.\r\n\r\nIf you don't know how to create a GitHub repository, follow the [official GitHub documentation](https://docs.github.com/en/github/getting-started-with-github/create-a-repo).\r\n\r\n### Add remote repository\r\n\r\n```\r\n$ git init\r\n$ git remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\r\n```\r\n\r\n## 4. Write blog-config.js\r\n\r\n```javascript\r\nmodule.exports = {\r\n  title: \"MY BLOG\",\r\n  description: \"Hello, This is my blog\",\r\n  author: \"YOUR NAME\",\r\n  siteUrl: \"https://myblog.com\",\r\n  links: {\r\n    github: \"https://github.com\",\r\n    facebook: \"https://www.facebook.com\",\r\n    instagram: \"https://www.instagram.com\",\r\n    etc: \"https://www.google.com/\",\r\n  },\r\n  utterances: {\r\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\r\n    type: \"pathname\",\r\n  },\r\n}\r\n```\r\n\r\ngatsby-starter-hoodie provides a configuration file called `blog-config.js`. In this file, you can configure blog, biography (profile), and utterance. The website settings you are currently viewing are as above.\r\n\r\nConfigure `blog-config.js` to suit your blog. However, it is recommended not to modify `utterances.type`.\r\n\r\n### Change profile image\r\n\r\nReplace `static/profile.png` with the image you want. To change the image file name, you need to change the source code of `src/components/Bio.jsx`.\r\n\r\n## 5. Add your content\r\n\r\nMarkdown content is in `contents/posts`. You can write and add your articles like the sample posts here. [Click here](/writing-guide) to see the detail writing guide.\r\n\r\n## 6. Deploy your blog\r\n\r\n### 6-1 via Netlify\r\n\r\nFollow the Connecting to Netlify steps in [A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/). It's not difficult.\r\n\r\nIf you connect the github repository using Netlify, it is automatically distributed whenever you push it, so it is convenient.\r\n\r\n### 6-2. via Github Pages\r\n\r\n#### Case 1\r\n\r\nIf the repository name is in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\r\n\r\n```\r\n$ npm run deploy-gh\r\n```\r\n\r\n#### Case 2\r\n\r\nIf the repository name is not in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\r\n\r\n```\r\n$ npm run deploy-gh-prefix-paths\r\n```\r\n\r\nIn the above case, you need to change `pathPrefix` in `gatsby-config.js` to your repository name.\r\n\r\n### 6-3. other platforms\r\n\r\n```\r\n$ npm run build\r\n```\r\n\r\nYou can build the gatsby website with the command above. The build output is created in the `/public` directory. Deploy the `/public` directory using the command for the platform you want to deploy.\r\n\r\n## 7. Cutomize\r\n\r\n### Project Structure\r\n\r\nYou can customize your own gatsby-starter-hoodie by referring to the following file structure 🙊.\r\n\r\n```\r\n├── node_modules\r\n├── contents\r\n│   └── posts // your articles are here\r\n├── public // build outputs are here\r\n└── src\r\n    ├── assets\r\n    │   └── theme // theme config is here\r\n    ├── components\r\n    │   └── Article\r\n    │       └── Body\r\n    │           └── StyledMarkdown\r\n    │               └── index.jsx // markdown styles are here\r\n    │   ...\r\n    ├── fonts // webfonts are here\r\n    ├── hooks\r\n    ├── images\r\n    ├── pages // page components are here\r\n    ├── reducers\r\n    ├── templates // post components are here\r\n    └── utils\r\n```\r\n"},{"excerpt":"About gatsby-starter-hoodie gatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also,…","fields":{"slug":"/about-hoodie/"},"frontmatter":{"date":"May 01, 2021","title":"🎇 1. About gatsby-starter-hoodie-test","tags":["hoodie","about"]},"rawMarkdownBody":"\r\n## About gatsby-starter-hoodie\r\n\r\ngatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also, you can easily categorize articles into tags and series.\r\n\r\nStart your blog with a neatly designed gatsby-starter-hoodie that supports dark mode.\r\n\r\n## Features\r\n\r\n- Markdown\r\n- Code Highlighting\r\n- Katex Syntax\r\n- Dark Mode (Responsive to the settings of the OS)\r\n- Tag Categoriazation\r\n- Series Categorization\r\n- Responsive Web\r\n- SEO\r\n- Utterance (Comment widget)\r\n\r\n## Let's get started\r\n\r\nFollow the [Quick Start](/quick-start)\r\n"},{"excerpt":"파비콘은 어떻게 변경하나요?  에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다. 만약 파비콘 파일의 이름을 변경하고 싶다면,  파일의  에서  속성을 변경하셔야합니다. Utterance 가 제대로 작동하지 않아요. http 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 htt…","fields":{"slug":"/other-tips-kr/"},"frontmatter":{"date":"April 04, 2021","title":"🤩 4. 그 외 팁들","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\r\n## 파비콘은 어떻게 변경하나요?\r\n\r\n`static/favicon.png` 에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다.\r\n\r\n만약 파비콘 파일의 이름을 변경하고 싶다면, `gatsby-config.js` 파일의 `gatsby-plugin-manifest` 에서 `icon` 속성을 변경하셔야합니다.\r\n\r\n## Utterance 가 제대로 작동하지 않아요.\r\n\r\nhttp 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 https 환경으로 제공하세요.\r\n\r\n## OG Image 를 설정하고 싶어요.\r\n\r\n`/static` 디렉토리의 `og-image.png` 파일을 여러분이 원하는 이미지 파일로 대체하세요.\r\n\r\n## 다른 질문이 있으신가요?\r\n\r\n이 문서에 댓글을 달거나 gatsby-starter-hoodie 레포지토리에 [이슈를 열어주세요](https://github.com/devHudi/gatsby-starter-hoodie/issues). 여러분의 참여가 gatsby-starter-hoodie 를 더욱 발전시킵니다. 감사해요 😎.\r\n"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\r\n## 1. 포스트 추가하기\r\n\r\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\r\n\r\n### 1-1. 포스트 파일 구조\r\n\r\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\r\n\r\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\r\n\r\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\r\n\r\n### 1-2. Frontmatter\r\n\r\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\r\n\r\n```\r\n---\r\ntitle: \"🤔 3. 작성 가이드\"\r\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\r\ndate: 2021-04-03\r\nupdate: 2021-04-03\r\ntags:\r\n  - hoodie\r\n  - writing-guide\r\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\r\n---\r\n```\r\n\r\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\r\n\r\n### 1-3. 마크다운 작성하기\r\n\r\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) 문서를 참고하세요.\r\n\r\n## 2. 코드 하이라이팅 & Katex\r\n\r\n### 2-1. 코드 하이라이팅\r\n\r\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\r\n\r\n#### 예시\r\n\r\nJavascript\r\n\r\n```javascript\r\nconsole.log(\"Hello, world!\")\r\n```\r\n\r\nPython\r\n\r\n```python\r\nprint(\"Hello, world!\")\r\n```\r\n\r\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\r\n\r\n### 2-2. Katex\r\n\r\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\r\n\r\n#### 인라인 모드\r\n\r\n$$E = m c^{2}$$\r\n\r\n#### 블럭 모드\r\n\r\n$$\r\n\\int_{0}^{\\infty} f(x) dx\r\n$$\r\n\r\n## 3. 글에 이미지 추가하기\r\n\r\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\r\n\r\n![샘플 이미지 캡션](sample-image.jpg)\r\n\r\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\r\n\r\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\r\n\r\n## 4. 태그\r\n\r\n![](tag-example.jpg)\r\n\r\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\r\n\r\n## 5. 시리즈\r\n\r\n![](series-example.jpg)\r\n\r\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\r\n\r\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\r\n"},{"excerpt":"아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉. 1. Gatsby 사이트 생성 컴퓨터에 node.js 와 gatsby-cli 가 설치되어 있어야합니다. 2. 개발 서버 시작 이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다. 3. Github 레포지토리 생성 Utterance 댓글 위젯은 Github 이슈 시…","fields":{"slug":"/quick-start-kr/"},"frontmatter":{"date":"April 02, 2021","title":"🚀 2. 빠르게 시작하기","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\r\n아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉.\r\n\r\n## 1. Gatsby 사이트 생성\r\n\r\n> 컴퓨터에 **node.js** 와 **gatsby-cli** 가 설치되어 있어야합니다.\r\n\r\n```\r\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\r\n```\r\n\r\n## 2. 개발 서버 시작\r\n\r\n```\r\n$ cd my-hoodie-blog\r\n$ npm run start\r\n```\r\n\r\n이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다.\r\n\r\n## 3. Github 레포지토리 생성\r\n\r\nUtterance 댓글 위젯은 **Github 이슈 시스템** 기반입니다. 따라서 각 블로그 별 Github 레포지토리가 필요합니다. 또한 여러분이 Github Pages 혹은 Netlify 로 블로그를 배포하길 원한다면, Github 레포지토리는 필수입니다.\r\n\r\n만약 Github 레포지토리를 생성하는 법을 모른다면, [Github 공식 문서](https://docs.github.com/en/github/getting-started-with-github/create-a-repo) 를 참조하세요.\r\n\r\n### 원격 레포지토리 등록\r\n\r\n```\r\ngit remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\r\n```\r\n\r\n## 4. blog-config.js 작성\r\n\r\n```javascript\r\nmodule.exports = {\r\n  title: \"MY BLOG\",\r\n  description: \"Hello, This is my blog\",\r\n  author: \"YOUR NAME\",\r\n  siteUrl: \"https://myblog.com\",\r\n  links: {\r\n    github: \"https://github.com\",\r\n    facebook: \"https://www.facebook.com\",\r\n    instagram: \"https://www.instagram.com\",\r\n    etc: \"https://www.google.com/\",\r\n  },\r\n  utterances: {\r\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\r\n    type: \"pathname\",\r\n  },\r\n}\r\n```\r\n\r\ngatsby-starter-hoodie 는 `blog-config.js` 라는 설정 파일을 제공합니다. 이 파일에서 블로그 정보, 작성자 프로필, Utterance 설정 등을 작성할 수 있습니다. 여러분 블로그 설정에 맞게 `blog-config.js` 를 설정하세요. 하지만, `utterances.type` 속성은 수정하지 않는 것을 권장합니다.\r\n\r\n### 프로필 이미지 변경\r\n\r\n`static/profile.png` 에 위치한 이미지 파일을 원하는 이미지 파일로 교체하세요. 만약 파일명을 변경하고 싶다면, `src/components/Bio.jsx` 의 소스코드를 수정해야합니다.\r\n\r\n## 5. 포스트 추가\r\n\r\n마크다운 포스트는 `contents/posts` 경로에 위치해있습니다. 해당 경로에서 글을 작성할 수 있습니다. [여기를 클릭하여](https://devHudi.github.io/gatsby-starter-hoodie/writing-guide) 더 자세한 글 작성 방법을 확인하세요.\r\n\r\n## 6. 블로그 배포하기\r\n\r\n### 6-1 Netlify 를 통해\r\n\r\n[A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/) 문서를 참조하여, Netlify 를 Github 레포지토리와 연결할 수 있습니다. 이 과정은 어렵지 않습니다.\r\n\r\nGithub 레포지토리와 연결이 되었다면, Github 레포지토리에 변경사항이 발생할 때 마다 자동으로 여러분의 블로그에 배포됩니다.\r\n\r\n### 6-2. Github Pages 를 통해\r\n\r\n#### 상황 1\r\n\r\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태일 경우, 아래 명령어를 실행해주세요.\r\n\r\n```\r\n$ npm run deploy-gh\r\n```\r\n\r\n#### 상황 2\r\n\r\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태가 아닐 경우, 아래 명령어를 실행해주세요.\r\n\r\n```\r\n$ npm run deploy-gh-prefix-paths\r\n```\r\n\r\n만약 위와 같은 경우 `gatsby-config.js` 에서 `pathPrefix` 를 여러분의 레포지토리 이름으로 바꿔야합니다.\r\n\r\n### 6-3. 다른 플랫폼\r\n\r\n```\r\n$ npm run build\r\n```\r\n\r\n위 명령어로 Gastby 웹사이트를 빌드할 수 있습니다. 빌드 결과물은 `/public` 에 저장됩니다. `/public` 디렉토리를 여러분이 사용하는 플랫폼의 배포 명령을 통해 배포해주세요.\r\n\r\n## 7. 커스터마이징\r\n\r\n### 프로젝트 구조\r\n\r\n아래 프로젝트 구조를 참고하여 커스터마이징 할 수 있습니다 🙊.\r\n\r\n```\r\n├── node_modules\r\n├── contents\r\n│   └── posts // your articles are here\r\n├── public // build outputs are here\r\n└── src\r\n    ├── assets\r\n    │   └── theme // theme config is here\r\n    ├── components\r\n    │   └── Article\r\n    │       └── Body\r\n    │           └── StyledMarkdown\r\n    │               └── index.jsx // markdown styles are here\r\n    │   ...\r\n    ├── fonts // webfonts are here\r\n    ├── hooks\r\n    ├── images\r\n    ├── pages // page components are here\r\n    ├── reducers\r\n    ├── templates // post components are here\r\n    └── utils\r\n```\r\n"},{"excerpt":"gatsby-starter-hoodie 에 대하여 gatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다. 다크모드를 지원하는 깔끔한 디자인의 gatsby-…","fields":{"slug":"/about-hoodie-kr/"},"frontmatter":{"date":"April 01, 2021","title":"🎇 1. gatsby-starter-hoodie 에 대하여","tags":["hoodie","about"]},"rawMarkdownBody":"\r\n## gatsby-starter-hoodie 에 대하여\r\n\r\ngatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다.\r\n\r\n다크모드를 지원하는 깔끔한 디자인의 gatsby-starter-hoodie 로 여러분의 블로그를 시작하세요.\r\n\r\n## 주요 기능\r\n\r\n- 마크다운\r\n- 코드 하이라이팅\r\n- Katex 문법\r\n- 다크모드 (OS 환경설정과 연동)\r\n- 태그 분류\r\n- 시리즈 분류\r\n- 반응형 웹\r\n- SEO\r\n- Utterance (댓글 위젯)\r\n\r\n## 시작\r\n\r\n[빠르게 시작하기](/quick-start-kr) 문서에서 블로그를 세팅하세요.\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}