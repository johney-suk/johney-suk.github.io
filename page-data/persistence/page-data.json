{"componentChunkName":"component---src-templates-post-jsx","path":"/persistence/","result":{"data":{"site":{"siteMetadata":{"title":"joni.blog"}},"markdownRemark":{"id":"0a4678af-1a08-5241-a7ef-eae70f3d5b0f","excerpt":"인 메모리(In-Memory) 저장 방식 레디스는 데이터를 저장하는 공간이 특별합니다. 일반적으로 mysql, oracle 등의 RDB들이 하드디스크에 데이터를 저장하고 관리하는 것과는 달리 레디스는 데이터를 주기억장치인 ram, 즉 In-memory에서 관리된다. 해당 저장 방식의 문제점과 시스템의 안정성을 위해 보완을 해야할 방법에대해서 정리하고 공부…","html":"<h2>인 메모리(In-Memory) 저장 방식</h2>\n<p>레디스는 데이터를 저장하는 공간이 특별합니다. 일반적으로 mysql, oracle 등의 RDB들이 하드디스크에 데이터를 저장하고 관리하는 것과는 달리 레디스는 데이터를 주기억장치인 ram, 즉 In-memory에서 관리된다. 해당 저장 방식의 문제점과 시스템의 안정성을 위해 보완을 해야할 방법에대해서 정리하고 공부한 내용 -> </p>\n<h2>인 메모리(In-Memory) 저장 방식의 문제점</h2>\n<p>redis의 in memory 저장 방식은 빠르기도 하지만 DB 서버에 장애가 발생할 경우 또는 서버 전원이 갑자기 꺼지면 안에 있는 데이터들이 삭제된다. 그래서 보통은 로그인 세션 같은, 서버가 꺼져서 날아가도 상관 없는 임시 데이터에 주로 쓰인다. 그리고 대부분 속도의 장점으로 사용되기 때문에 압축은 하지 않으며, 데이터에 비해 RAM 용량이 넉넉하지 않을 경우 가상 메모리를 쓰게 되어 역효과가 일어나기도 한다.</p>\n<h2>저장 방식 문제점 보완을 위한 Persist Option</h2>\n<p><img src=\"/static/3-b6ffe79ed40bd3b9017bde6047590dee.png\" alt=\"문제점 보완을 위한 Persist Option\">\n메모리 기반이지만 Redis는 영속적인 데이터 보존(Persistence)이 가능하다. (메모리는 원래 휘발성) 기존 데이터를 영속화하여 복구, 유지시키기 위해서는 디스크에 데이터 백업해주는 과정이 필요하다. </p>\n<p>백업 방식에는 1) RDB snapshot, 2) AOF 2가지가 있다.</p>\n<blockquote>\n<p>여기서 <code class=\"language-text\">RDB</code>는 Redis DataBase를 의미한다.</p>\n</blockquote>\n<h4>RDB snapshot 방식</h4>\n<p>특정 시점을 스냅샷으로 남겨 데이터를 저장하는 방식을 말한다. redis.conf 파일에서 스냅샷 저장에 대한 주기 설정을 할 수 있다.</p>\n<p>아래는 메신저 프로젝트 테스트 서버의 redis.conf에 <code class=\"language-text\">save 900 1 300 10 60 10000</code> 설정 값이다. 주석된 내용 처럼 조건이 여러 개 있을 때는 조건 중 하나라도 만족하면 save시킨다. 즉, 900초 동안 1개 이상의 데이터가 변경되거나 300초 동안 10개 이상의 데이터가 변경되거나 60초 동안 10000개 이상의 데이터가 변경되면 dump.rdb 파일을 생성하며 디스크에 데이터를 백업한다. 리부팅시에는 dump.rdb 파일이 있으면 읽어서 복구시킨다.\n<img src=\"/static/2-e8d3c5e5dabbf809e89f5ddadc4bc0cc.png\" alt=\"redis.conf 설정\"></p>\n<blockquote>\n<p>RDB(snapthot)는 설정한 주기 및 데이터 양에따라 메모리에 있는 내용을 스냅샷을 떠서 DISK에 옮겨 담는 방식이다.</p>\n</blockquote>\n<h4>AOF 방식</h4>\n<h2>선택 기준</h2>\n<p>백업은 필요하지만 어느정도 손실이 괜찮은 경우 ➡️ RDB 사용<Br>\n장애 상황 직전까지의 데이터 보장이 필요한 경우 ➡️ AOF 사용</p>\n<h2>다음</h2>\n<p><a href=\"../oauth-2.0/index.md\">Redis의 저장 방식</a> Redis의 저장 방식</p>","frontmatter":{"title":"Persist Option 데이터 영구 저장하기 AOF, RDB","date":"May 22, 2024","update":"May 22, 2024","tags":["DataBase","Redis"],"series":"Redis 개념과 동작 원리"},"fields":{"slug":"/persistence/","readingTime":{"minutes":3.785}}},"seriesList":{"edges":[{"node":{"id":"c543d984-bc36-5b39-97ba-2bf76ca38e89","fields":{"slug":"/note/"},"frontmatter":{"title":"[정리] Redis 실무에 사용하면서 공부한 내용"}}},{"node":{"id":"0a4678af-1a08-5241-a7ef-eae70f3d5b0f","fields":{"slug":"/persistence/"},"frontmatter":{"title":"Persist Option 데이터 영구 저장하기 AOF, RDB"}}}]},"previous":{"fields":{"slug":"/note/"},"frontmatter":{"title":"[정리] Redis 실무에 사용하면서 공부한 내용"}},"next":null},"pageContext":{"id":"0a4678af-1a08-5241-a7ef-eae70f3d5b0f","series":"Redis 개념과 동작 원리","previousPostId":"c543d984-bc36-5b39-97ba-2bf76ca38e89","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}