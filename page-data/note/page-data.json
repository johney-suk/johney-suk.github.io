{"componentChunkName":"component---src-templates-post-jsx","path":"/note/","result":{"data":{"site":{"siteMetadata":{"title":"joni.blog"}},"markdownRemark":{"id":"c543d984-bc36-5b39-97ba-2bf76ca38e89","excerpt":"서론 작년 실무에서 진행된 메신저 개발에서 프로젝트의 모바일 연동 및 로 구축 업무를 인수인계를 받으며 세션 관리, 실시간 메시지 전달, 채팅 히스토리 저장, 온라인 상태 관리, 분산 캐시 등 다양한 용도로 Redis 활용하였고, 프로젝트 진행 과정에서 정리한 Redis 개념과 동작 원리를 포스팅하겠습니다. Redis란? Redis(Remote Dicti…","html":"<h2>서론</h2>\n<p>작년 실무에서 진행된 메신저 개발에서 프로젝트의 모바일 연동 및 <code class=\"language-text\">온프레미스(On-premise)</code>로 구축 업무를 인수인계를 받으며 세션 관리, 실시간 메시지 전달, 채팅 히스토리 저장, 온라인 상태 관리, 분산 캐시 등 다양한 용도로 Redis 활용하였고, 프로젝트 진행 과정에서 정리한 Redis 개념과 동작 원리를 포스팅하겠습니다.</p>\n<h2>Redis란?</h2>\n<p>Redis(Remote Dictionary Storage,레디스)는 모든 데이터를 메모리에 저장하고 조회하는 in-memory DB, 모든 데이터를 메모리로 불러와서 처리하는 메모리 기반의 key-value 구조의 데이터 관리 시스템(DBMS)이다. 일종의 NoSQL이다.</p>\n<blockquote>\n<p>이런 기술을 위해 Redis 가 존재하고 누군가는 Redis 를 캐싱 솔루션이라고 부르기도 하고 누군가는 NoSQL 의 <code class=\"language-text\">Key-Value 저장소</code>라고 부르기도 한다.</p>\n</blockquote>\n<h2>Key-Value 저장소 이해</h2>\n<p>key-value 구조 데이터란, mysql 같은 관계형 데이터가 아닌 비 관계형 구조로서 데이터를 그저 '키-값' 형태로 단순하게 저장하는 구조를 말한다.</p>\n<blockquote>\n<p>장점은 데이터의 고속 읽기와 쓰기에 최적화, 단점은 쿼리 연산을 지원 X</p>\n</blockquote>\n<p><img src=\"/static/1-c79173a4374f5888622d74ce6a69688d.png\" alt=\"키-값 데이터 저장소의 간단한 예\"></p>\n<h2>인 메모리(In-Memory) 저장 방식</h2>\n<p>레디스는 데이터를 저장하는 공간이 특별합니다. 일반적으로 mysql, oracle 등의 RDB들이 하드디스크에 데이터를 저장하고 관리하는 것과는 달리 레디스는 데이터를 주기억장치인 ram, 즉 In-memory에서 관리된다.</p>\n<h2>인 메모리(In-Memory) 저장 방식의 문제점</h2>\n<p>redis의 in memory 저장 방식은 빠르기도 하지만 DB 서버에 장애가 발생할 경우 또는 서버 전원이 갑자기 꺼지면 안에 있는 데이터들이 삭제된다. 그래서 보통은 로그인 세션 같은, 서버가 꺼져서 날아가도 상관 없는 임시 데이터에 주로 쓰인다. 그리고 대부분 속도의 장점으로 사용되기 때문에 압축은 하지 않으며, 데이터에 비해 RAM 용량이 넉넉하지 않을 경우 가상 메모리를 쓰게 되어 역효과가 일어나기도 한다.</p>\n<h2>RDB, NoSQL, In-Memory DB 비교</h2>\n<h2>Redis의 주요 특성</h2>\n<h3>Redis 용어 정리</h3>\n<table>\n<thead>\n<tr>\n<th>항목</th>\n<th>내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key-Value 스토어</td>\n<td>Key-Value 를 저장할 수 있는 스토리지를 지원한다.</td>\n</tr>\n<tr>\n<td>컬렉션 지원</td>\n<td>List, Set, Sorted Set, Hash 등의 자료구조를 지원한다.</td>\n</tr>\n<tr>\n<td>Pub/Sub 지원</td>\n<td>Publish/Subscribe 모델을 지원한다.</td>\n</tr>\n<tr>\n<td>디스크 저장(Persistent Layer)</td>\n<td>현재 메모리의 상태를 디스크로 저장할 수 있는 기능과 현재까지의 업데이트 내용을 로그로 저장할 수 있는 AOF 기능이 있다.</td>\n</tr>\n<tr>\n<td>복제(Replication)</td>\n<td>다른 노드에서 해당 내용을 복제할 수 있는 Master/Slave 구조를 지원한다.</td>\n</tr>\n<tr>\n<td>복제(Replication)</td>\n<td>이상의 기능을 지원하면서도 초당 100,000 QPS(Queries Per Second) 수준의 높은 성능을 지원한다.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>Key-Value 스토어</p>\n<ul>\n<li>기본적으로 Redis 는 Key-Value 스토어로 빠르고 간단하게 데이터를 가지고 올 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>컬렉션 지원</p>\n<ul>\n<li>Redis 는 여러가지 자료구조를 지원하므로 서비스에 맞는 설계를 할 때 유용하게 사용될 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>디스크 저장</p>\n<ul>\n<li>Redis 의 특징 중 하나는 현재 메모리의 상태를 디스크에 스냅샷 형태로 남길 수 있는 RDB 방식이 있다. 그러므로 Redis 를 restart 할 때 스냅샷에 있는 내용을 가지고 쉽게 복구할 수 있고, AOF(Append Only File) 형태로 Redis 에 변경 내역들을 모두 남기는게 가능해서 Write Behind 같은 기능을 지원하는 것도 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>복제</p>\n<ul>\n<li>Redis 는 Master/Slave 구조로 이용할 수 있어서 Master 의 읽기 부하를 Slave 로 나누는게 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>빠른 성능</p>\n<ul>\n<li>Redis 를 이용하는 가장 큰 이유는 성능이다. 초당 50,000 ~ 60,000 이상의 처리 속도가 필요하다면 어쩔 수 없이 Redis 나 Memcached 를 이용해야한다.</li>\n</ul>\n</li>\n</ul>\n<h2>Redis와 비교대상 Memcashed</h2>\n<p>Memcahed와 Redis와 비교대상으로 질문이 많은데 이젠에 살펴본 후 머릿속에 남아있던 기억은 사실상 Redis가 더많은 기능을 제공하고있고 단순히 Memcahed에 비해 Redis가 추가적으로 제공하는 기능이 많았다고 기억하고 있습니다.\n블로그를 작성하게되면서 더욱 자세히 알게되었고 리마인드하며 내용을 정리 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Memcached 는 캐싱 솔루션이고 Redis 는 저장소의 개념까지 추가된 것 입니다.</code></pre></div>\n<p>캐싱이란 말은 빠른 응답을 위해 결과를 저장해주는 솔루션을 말하고 언제든지 사라져도 상관없습니다. 하지만 저장소의 개념은 데이터가 보존되어야 한다는 의미입니다. 그래서 Redis 는 RDB 나 AOF 같은 기능을 지원하기도 합니다.</p>\n<p>그리고 추가로 Redis 는 Memcached 에 없는 여러가지 자료구조를 지원해서 개발자의 생산성을 높여주는 일도 해줍니다.</p>\n<h3>Redis 와 Memcached 의 장단점 비교</h3>\n<table>\n<thead>\n<tr>\n<th>기능</th>\n<th>Redis</th>\n<th>Memcached</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>속도</td>\n<td>초당 100,000 QPS 이상</td>\n<td>초당 100,000 QPS 이상</td>\n</tr>\n<tr>\n<td>자료구조</td>\n<td>List, Set, Sorted Set, Hash 지원</td>\n<td>Key-Value 만 지원</td>\n</tr>\n<tr>\n<td>안정성</td>\n<td>특성을 잘못 이해할 경우에 장애가 발생할 수 있다.</td>\n<td>장애가 거의 없다.</td>\n</tr>\n<tr>\n<td>응답 속도의 균일성</td>\n<td>Memcached 에 비해서 응답속도의 균일성이 떨어질 수 있다.</td>\n<td>전체적으로 응답속도는 균일하다.</td>\n</tr>\n</tbody>\n</table>\n<p>응답 속도의 균일성 같은 경우가 Redis 와 Memcached 가 차이나는 이유는 메모리 할당 구조가 다르기 떄문인데 Redis 같은 경우는 Jemalloc() 을 사용해 메모리 할당을 하고 free() 를 통해서 메모리 할당을 지웁니다. 반면에 Memcached 는 slab 을 통해서 일정한 사이즈의 메모리를 균일하게 1MB 의 페이지로 자르고 그 안에 또 작은 사이즈 부터 큰 사이즈의 chunk() 를 일정하게 놔두는 식을 이용해 메모리 내부 단편화 현상은 있지만 외부 단편화 현상을 없도록 해서 메모리 관리를 조금 더 효율적으로 이용할 수 있어서 응답 속도가 비교적 균일합니다.</p>\n<h2>다음</h2>\n<p><a href=\"../oauth-2.0/index.md\">Redis의 저장 방식</a> Redis의 저장 방식</p>","frontmatter":{"title":"[정리] Redis 실무에 사용하면서 공부한 내용","date":"May 21, 2024","update":"May 21, 2024","tags":["DataBase","Redis"],"series":"Redis 개념과 동작 원리"},"fields":{"slug":"/note/","readingTime":{"minutes":8.46}}},"seriesList":{"edges":[{"node":{"id":"c543d984-bc36-5b39-97ba-2bf76ca38e89","fields":{"slug":"/note/"},"frontmatter":{"title":"[정리] Redis 실무에 사용하면서 공부한 내용"}}}]},"previous":{"fields":{"slug":"/oauth-2.0/"},"frontmatter":{"title":"OAuth 2.0 개념(Open Authorization)?"}},"next":null},"pageContext":{"id":"c543d984-bc36-5b39-97ba-2bf76ca38e89","series":"Redis 개념과 동작 원리","previousPostId":"2815a0d6-75ad-50e9-854e-be4069388615","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}